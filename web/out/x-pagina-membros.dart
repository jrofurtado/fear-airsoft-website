// Auto-generated from x-pagina-membros.html.
// DO NOT EDIT.

library x_pagina_membros;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'x-loading.html.dart';
import 'x-member.dart';
import 'x-member-item.dart';
import 'x-legenda-emblema.dart';
import 'package:web_ui/web_ui.dart';
import 'dart:html';
import 'model.dart';



class PaginaMembros extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  static final __html1 = new autogenerated.Element.tag('x-loading'), __html2 = new autogenerated.Element.tag('x-member'), __html3 = new autogenerated.Element.tag('x-member-item'), __html4 = new autogenerated.Element.tag('x-legenda-emblema'), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <div class="pesquisa">
          <input type="text" placeholder="Pesquisar" id="__e-37">
        </div>
        <div class="divClearBoth"></div>
        <template id="__e-39"></template>
        <template id="__e-41"></template>
        <template id="__e-43"></template>
        <template id="__e-45"></template>
      ''');
  autogenerated.Element __e39, __e41, __e43, __e45;
  autogenerated.InputElement __e37;
  autogenerated.Template __t;

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    if (_root is autogenerated.ShadowRoot) _root.applyAuthorStyles = true;
    _root.nodes.add(__shadowTemplate.clone(true));
    __e37 = _root.query('#__e-37');
    __t.listen(__e37.onInput, ($event) { pesquisa = __e37.value; });
    __t.oneWayBind(() => pesquisa, (e) { if (__e37.value != e) __e37.value = e; }, false, false);
    __e39 = _root.query('#__e-39');
    __t.conditional(__e39, () => model.membros.length==0, (__t) {
      var __e38;
      __e38 = __html1.clone(true);
      __t.component(new XLoading()..host = __e38);
    __t.addAll([new autogenerated.Text('\n          '),
        __e38,
        new autogenerated.Text('\n        ')]);
    });

    __e41 = _root.query('#__e-41');
    __t.conditional(__e41, () => membroEscolhido!=null, (__t) {
      var __e40;
      __e40 = __html2.clone(true);
      __t.oneWayBind(() => membroEscolhido, (e) { if (__e40.xtag.membro != e) __e40.xtag.membro = e; }, false, false);
      __t.component(new Member()..host = __e40);
    __t.addAll([new autogenerated.Text('\n          '),
        __e40,
        new autogenerated.Text('\n        ')]);
    });

    __e43 = _root.query('#__e-43');
    __t.loop(__e43, () => resultados, (membro, __t) {
      var __e42;
      __e42 = __html3.clone(true);
      __t.oneWayBind(() => membro, (e) { if (__e42.xtag.membro != e) __e42.xtag.membro = e; }, false, false);
      __t.component(new MemberItem()..host = __e42);
    __t.addAll([new autogenerated.Text('\n          '),
        __e42,
        new autogenerated.Text('\n        ')]);
    });
    __e45 = _root.query('#__e-45');
    __t.conditional(__e45, () => model.emblemaSeleccionado!=null, (__t) {
      var __e44;
      __e44 = __html4.clone(true);
      __t.oneWayBind(() => model.emblemaSeleccionado, (e) { if (__e44.xtag.nome != e) __e44.xtag.nome = e; }, false, false);
      __t.component(new LegendaEmblema()..host = __e44);
    __t.addAll([new autogenerated.Text('\n          '),
        __e44,
        new autogenerated.Text('\n        ')]);
    });

    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e37 = __e39 = __e41 = __e43 = __e45 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  String pesquisa="";
  List<Map> get resultados{
    String lpesquisa = pesquisa.toLowerCase();
    var res = model.membros.where((member) => member["name"].toLowerCase().contains(lpesquisa));
    return res.toList();
  }
  Map get membroEscolhido{
    List<String> params = model.hash.split("/");
    if(params.length>=3){
      var res = model.membros.where((member) => member["socio"].toString() == params.elementAt(2));
      if(res.isEmpty) {
        return null;
      }
      return res.first;
    }
    return null;
  }
}
//@ sourceMappingURL=x-pagina-membros.dart.map