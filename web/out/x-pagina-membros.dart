// Auto-generated from x-pagina-membros.html.
// DO NOT EDIT.

library x_pagina_membros;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'x-loading.html.dart';
import 'x-member.dart';
import 'x-member-item.dart';
import 'x-legenda-emblema.dart';
import 'package:web_ui/web_ui.dart';
import 'dart:html';
import 'model.dart';



class PaginaMembros extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  static final __html1 = new autogenerated.Element.tag('x-loading'), __html2 = new autogenerated.Element.tag('x-member'), __html3 = new autogenerated.Element.tag('x-member-item'), __html4 = new autogenerated.Element.tag('x-legenda-emblema'), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <div class="pesquisa">
          <input type="text" placeholder="Pesquisar" id="__e-56">
        </div>
        <div class="divClearBoth"></div>
        <template id="__e-58"></template>
        <template id="__e-60"></template>
        <template id="__e-62"></template>
        <template id="__e-64"></template>
      ''');
  autogenerated.Element __e58, __e60, __e62, __e64;
  autogenerated.InputElement __e56;
  autogenerated.Template __t;

  PaginaMembros.forElement(e) : super.forElement(e);

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    if (_root is autogenerated.ShadowRoot) _root.applyAuthorStyles = true;
    _root.nodes.add(__shadowTemplate.clone(true));
    __e56 = _root.query('#__e-56');
    __t.listen(__e56.onInput, ($event) { pesquisa = __e56.value; });
    __t.oneWayBind(() => pesquisa, (e) { __e56.value = e; }, false, false);
    __e58 = _root.query('#__e-58');
    __t.conditional(__e58, () => model.membros.length==0, (__t) {
      var __e57;
      __e57 = __html1.clone(true);
      __t.component(new XLoading.forElement(__e57));
    __t.addAll([new autogenerated.Text('\n          '),
        __e57,
        new autogenerated.Text('\n        ')]);
    });

    __e60 = _root.query('#__e-60');
    __t.conditional(__e60, () => membroEscolhido!=null, (__t) {
      var __e59;
      __e59 = __html2.clone(true);
      __t.oneWayBind(() => membroEscolhido, (e) { __e59.xtag.membro = e; }, false, false);
      __t.component(new Member.forElement(__e59));
    __t.addAll([new autogenerated.Text('\n          '),
        __e59,
        new autogenerated.Text('\n        ')]);
    });

    __e62 = _root.query('#__e-62');
    __t.loop(__e62, () => resultados, (membro, __t) {
      var __e61;
      __e61 = __html3.clone(true);
      __t.oneWayBind(() => membro, (e) { __e61.xtag.membro = e; }, false, false);
      __t.component(new MemberItem.forElement(__e61));
    __t.addAll([new autogenerated.Text('\n          '),
        __e61,
        new autogenerated.Text('\n        ')]);
    });
    __e64 = _root.query('#__e-64');
    __t.conditional(__e64, () => model.emblemaSeleccionado!=null, (__t) {
      var __e63;
      __e63 = __html4.clone(true);
      __t.oneWayBind(() => model.emblemaSeleccionado, (e) { __e63.xtag.nome = e; }, false, false);
      __t.component(new LegendaEmblema.forElement(__e63));
    __t.addAll([new autogenerated.Text('\n          '),
        __e63,
        new autogenerated.Text('\n        ')]);
    });

    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e56 = __e58 = __e60 = __e62 = __e64 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  String pesquisa="";
  List<Map> get resultados{
    String lpesquisa = pesquisa.toLowerCase();
    var res = model.membros.where((member) => member["name"].toLowerCase().contains(lpesquisa));
    return res.toList();
  }
  Map get membroEscolhido{
    List<String> params = model.hash.split("/");
    if(params.length>=3){
      var res = model.membros.where((member) => member["socio"].toString() == params.elementAt(2));
      if(res.isEmpty) {
        return null;
      }
      return res.first;
    }
    return null;
  }
}
//@ sourceMappingURL=x-pagina-membros.dart.map