// Auto-generated from x-legenda-emblema.html.
// DO NOT EDIT.

library x_legenda_emblema;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/web_ui.dart';
import 'dart:html';
import '../model.dart';
import 'x-loading.html.dart';



class LegendaEmblema extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  autogenerated.AnchorElement __e135;
  autogenerated.Element __e137, __e148;
  autogenerated.Template __t;

  LegendaEmblema.forElement(e) : super.forElement(e);

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    if (_root is autogenerated.ShadowRoot) _root.applyAuthorStyles = true;
    _root.innerHtml = '''
        <div class="disabled">
        <div class="legenda fadeInRightBig animated">
          <a class="closeWindow" id="__e-135">X</a>          
          <template id="__e-137"></template>
          <template id="__e-148"></template>
          <div class="divClearBoth"></div>
        </div>
        </div>
      ''';
    __e135 = _root.query('#__e-135');
    __t.listen(__e135.onClick, ($event) { clickClose(); });
    __t.oneWayBind(() => model.href, (e) { __e135.href = e; }, false, true);
    __e137 = _root.query('#__e-137');
    __t.conditional(__e137, () => emblema==null, (__t) {
      var __e136;
      __e136 = new autogenerated.Element.tag('x-loading');
      new Loading.forElement(__e136);
      __t.component(__e136);
    __t.addAll([new autogenerated.Text('\n            '),
        __e136,
        new autogenerated.Text('\n          ')]);
    });

    __e148 = _root.query('#__e-148');
    __t.conditional(__e148, () => emblema!=null, (__t) {
      var __e138, __e139, __e141, __e143, __e145, __e147;
      __e139 = new autogenerated.Element.html('<div><img class="membro-emblema" id="__e-138"></div>');
      __e138 = __e139.query('#__e-138');
      __t.bind(() => emblema['imageName'],  (__e) { __e138.src = autogenerated.sanitizeUri('../emblemas/${__e.newValue}.png'); }, false);
      __t.oneWayBind(() => emblema['nome'], (e) { __e138.attributes['titulo'] = e; }, false, false);
      __e141 = new autogenerated.DivElement();
      var __binding140 = __t.contentBind(() => emblema['nome'], false);
      __e141.nodes.addAll([new autogenerated.Element.html('<strong>Nome:</strong>'),
          new autogenerated.Text(' '),
          __binding140]);
      __e143 = new autogenerated.DivElement();
      var __binding142 = __t.contentBind(() => emblema['tipo'], false);
      __e143.nodes.addAll([new autogenerated.Element.html('<strong>Tipo:</strong>'),
          new autogenerated.Text(' '),
          __binding142]);
      __e145 = new autogenerated.DivElement();
      var __binding144 = __t.contentBind(() => emblema['custoEstrela'], false);
      __e145.nodes.addAll([new autogenerated.Element.html('<strong>Custo por estela:</strong>'),
          new autogenerated.Text(' '),
          __binding144]);
      __e147 = new autogenerated.DivElement();
      var __binding146 = __t.contentBind(() => emblema['descricao'], false);
      __e147.nodes.addAll([new autogenerated.Element.html('<strong>Descrição:</strong>'),
          new autogenerated.Text(' '),
          __binding146]);
    __t.addAll([new autogenerated.Text('\n            '),
        __e139,
        new autogenerated.Text('\n            '),
        __e141,
        new autogenerated.Text('\n            '),
        __e143,
        new autogenerated.Text('\n            '),
        __e145,
        new autogenerated.Text('\n            '),
        __e147,
        new autogenerated.Text('\n          ')]);
    });

    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e135 = __e137 = __e148 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  String nome;
  Map get emblema{
    if(nome!=null){
      var res = model.emblemas['emblemas'].where((emblema) => emblema["nome"] == nome);
      if(res.isEmpty)
        return null;
      return res.first;
    }
    return null;
  }
  void clickClose(){
    model.emblemaSeleccionado = null;
  }
}
//@ sourceMappingURL=x-legenda-emblema.dart.map